version: 1

fragments:
  not_tot_team: "team <> 'TOT'"
  season_filter: "season = {{ season }}"

templates:

  leaders_batting_counting:
    description: "Top N leaders for a counting batting stat with ties"
    # Regex patterns for match_template_data_driven (optional if only using fast-path)
    patterns:
      - "(?i)leaders? in (?P<stat_label>hr|home runs?) in (?P<season>\\d{4})"
    params: ["season", "top_n", "stat_col", "stat_label"]
    defaults:
      top_n: 10
      stat_col: "hr"
    param_types:
      season: int
      top_n: int
    sql: |
      WITH player AS (
        SELECT idfg, MAX(name) AS name, SUM({{ stat_col }})::numeric AS {{ stat_label }}
        FROM fangraphs_batting_lahman_like
        WHERE {{ fragments.season_filter }} AND {{ fragments.not_tot_team }}
        GROUP BY idfg
      ),
      ranked AS (
        SELECT name, {{ stat_label }},
               DENSE_RANK() OVER (ORDER BY {{ stat_label }} DESC) AS rnk
        FROM player
      )
      SELECT name, {{ stat_label }}
      FROM ranked
      WHERE rnk <= {{ top_n }}
      ORDER BY {{ stat_label }} DESC, name;

  leaders_pitching_rate_low_is_best:
    description: "Top N leaders for a pitching rate stat where lower is better"
    patterns:
      - "(?i)lowest (?P<stat_label>era|fip) in (?P<season>\\d{4})"
    params: ["season", "top_n", "stat_col", "stat_label"]
    defaults:
      top_n: 10
      stat_col: "era"
    param_types:
      season: int
      top_n: int
    sql: |
      WITH pitcher AS (
        SELECT idfg, MAX(name) AS name, AVG({{ stat_col }})::numeric AS {{ stat_label }}
        FROM fangraphs_pitching_lahman_like
        WHERE {{ fragments.season_filter }} AND {{ fragments.not_tot_team }}
        GROUP BY idfg
      ),
      ranked AS (
        SELECT name, {{ stat_label }},
               DENSE_RANK() OVER (ORDER BY {{ stat_label }} ASC) AS rnk
        FROM pitcher
      )
      SELECT name, {{ stat_label }}
      FROM ranked
      WHERE rnk <= {{ top_n }}
      ORDER BY {{ stat_label }} ASC, name;

  leaders_batting_rate:
    description: "Top N leaders for a rate batting stat (AVG/OBP/SLG/OPS) with ties"
    params: ["season", "top_n", "stat_col", "stat_label"]
    defaults:
      top_n: 10
    param_types:
      season: int
      top_n: int
    sql: |
      WITH player AS (
        SELECT idfg,
               MAX(name) AS name,
               AVG({{ stat_col }})::numeric AS {{ stat_label }}
        FROM fangraphs_batting_lahman_like
        WHERE {{ fragments.season_filter }} AND {{ fragments.not_tot_team }}
        GROUP BY idfg
      ),
      ranked AS (
        SELECT name,
               {{ stat_label }},
               DENSE_RANK() OVER (ORDER BY {{ stat_label }} DESC) AS rnk
        FROM player
      )
      SELECT name, {{ stat_label }}
      FROM ranked
      WHERE rnk <= {{ top_n }}
      ORDER BY {{ stat_label }} DESC, name;

  leaders_batting_qualified:
    description: "Top N leaders with PA qualification (3.1 * max team games) with ties"
    params: ["season", "top_n", "stat_agg", "stat_label"]
    defaults:
      top_n: 10
    param_types:
      season: int
      top_n: int
    sql: |
      WITH tg AS (
        SELECT MAX(g) AS max_games
        FROM fangraphs_batting_lahman_like
        WHERE {{ fragments.season_filter }} AND {{ fragments.not_tot_team }}
      ),
      player AS (
        SELECT idfg,
               MAX(name) AS name,
               SUM(pa) AS pa,
               {{ stat_agg }} AS {{ stat_label }}
        FROM fangraphs_batting_lahman_like
        WHERE {{ fragments.season_filter }} AND {{ fragments.not_tot_team }}
        GROUP BY idfg
      ),
      qualified AS (
        SELECT p.*
        FROM player p, tg
        WHERE p.pa >= (3.1 * tg.max_games)
      ),
      ranked AS (
        SELECT name,
               {{ stat_label }},
               DENSE_RANK() OVER (ORDER BY {{ stat_label }} DESC) AS rnk
        FROM qualified
      )
      SELECT name, {{ stat_label }}
      FROM ranked
      WHERE rnk <= {{ top_n }}
      ORDER BY {{ stat_label }} DESC, name;

  leaders_pitching_counting:
    description: "Top N leaders for a counting pitching stat (SO/BB/SV/etc.) with ties"
    params: ["season", "top_n", "stat_col", "stat_label"]
    defaults:
      top_n: 10
    param_types:
      season: int
      top_n: int
    sql: |
      WITH pitcher AS (
        SELECT idfg,
               MAX(name) AS name,
               SUM({{ stat_col }})::numeric AS {{ stat_label }}
        FROM fangraphs_pitching_lahman_like
        WHERE {{ fragments.season_filter }} AND {{ fragments.not_tot_team }}
        GROUP BY idfg
      ),
      ranked AS (
        SELECT name,
               {{ stat_label }},
               DENSE_RANK() OVER (ORDER BY {{ stat_label }} DESC) AS rnk
        FROM pitcher
      )
      SELECT name, {{ stat_label }}
      FROM ranked
      WHERE rnk <= {{ top_n }}
      ORDER BY {{ stat_label }} DESC, name;

